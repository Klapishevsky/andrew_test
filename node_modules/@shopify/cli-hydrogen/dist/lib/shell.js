import os from 'node:os';
import { fileExists } from '@shopify/cli-kit/node/fs';
import { joinPath } from '@shopify/cli-kit/node/path';
import { outputDebug } from '@shopify/cli-kit/node/output';
import { getPackageManager } from '@shopify/cli-kit/node/node-package-manager';
import { execAsync } from './process.js';

const ALIAS_NAME = "h2";
const isWindows = () => process.platform === "win32";
const isGitBash = () => !!process.env.MINGW_PREFIX;
function resolveFromHome(filepath) {
  if (filepath[0] === "~") {
    return joinPath(os.homedir(), filepath.slice(1));
  }
  return filepath;
}
function homeFileExists(filepath) {
  try {
    return fileExists(resolveFromHome(filepath));
  } catch (error) {
    return false;
  }
}
async function supportsShell(shell) {
  try {
    await execAsync(`which ${shell}`);
    return true;
  } catch {
    return false;
  }
}
function getShellAliasDefinitionFile(shell) {
  if (shell === "bash")
    return "~/.bashrc";
  if (shell === "zsh")
    return "~/.zshrc";
  return `~/.config/fish/functions/${ALIAS_NAME}.fish`;
}
async function hasAliasDefinition(aliasName, shell) {
  const filepath = getShellAliasDefinitionFile(shell);
  try {
    if (shell === "fish") {
      return await homeFileExists(filepath);
    }
    const result = await execAsync(
      `grep 'alias ${aliasName}' ${resolveFromHome(filepath)}`
    );
    return !!result.stdout;
  } catch {
    return false;
  }
}
async function shellWriteFile(shell, content, append = false) {
  const filepath = getShellAliasDefinitionFile(shell);
  content = `"${content}"`;
  content = content.replaceAll("\n", "\\n");
  if (!isWindows()) {
    content = content.replaceAll("$", "\\$");
  }
  try {
    await execAsync(
      `printf ${content} ${append ? ">>" : ">"} ${resolveFromHome(filepath)}`
    );
    return true;
  } catch (error) {
    outputDebug(
      `Could not create or modify ${filepath}:
` + error.stack
    );
    return false;
  }
}
async function shellWriteAlias(shell, aliasName, content) {
  if (!await supportsShell(shell))
    return false;
  if (await hasAliasDefinition(aliasName, shell))
    return true;
  return await shellWriteFile(shell, content, shell !== "fish");
}
async function shellRunScript(script, shellBin) {
  try {
    await execAsync(script, { shell: shellBin });
    return true;
  } catch (error) {
    outputDebug(
      `Could not run shell script for ${shellBin}:
` + error.stack
    );
    return false;
  }
}
function isKnownUnixShell(shell) {
  return ["zsh", "bash", "fish"].includes(shell);
}
async function hasCliAlias() {
  try {
    if (isWindows() && !isGitBash()) {
      await execAsync(`Get-Alias -Name ${ALIAS_NAME}`);
    } else {
      const shell = os.userInfo().shell?.split("/").pop() ?? "bash";
      if (!isKnownUnixShell(shell))
        return false;
      return await hasAliasDefinition(ALIAS_NAME, shell);
    }
    return true;
  } catch {
    return false;
  }
}
async function getCliCommand() {
  if (await hasCliAlias()) {
    return ALIAS_NAME;
  }
  let cli = "npx";
  const pkgManager = await getPackageManager(process.cwd()).catch(() => null);
  if (pkgManager === "pnpm" || pkgManager === "yarn")
    cli = pkgManager;
  return `${cli} shopify hydrogen`;
}

export { ALIAS_NAME, getCliCommand, isGitBash, isWindows, shellRunScript, shellWriteAlias };
